import numpy as np

from src.trafficSimulator.generator import Generator
from src.trafficSimulator.simulation import Simulation
from src.trafficSimulator.traffic_lights import TrafficSignal
from src.trafficSimulator.window import Window

def run_simulation(sim):
    win = Window(sim)
    win.offset = (-1000, -1000)
    win.zoom = 0.4
    win.run()

def intensity_function_in(t):
    if t > 1440: return 0
    return max(0, 2.0 * np.sin(np.pi * t / 960)) + np.random.uniform(0, 0.25)

def intensity_function_out(t):
    if t > 1440: return 0
    return max(0, 2.0 * np.sin(np.pi * (-0.5 + t / 960))) + np.random.uniform(0, 0.25)

def set_roads_with_right_of_way(sim):
    print("roads")
    data =[
        ((0, 300), (280, 360), 1, 25.00, False, True, 1),
        ((280, 360), (0, 300), 2, 25.00, True, True, 1),
        ((400, 100), (280, 360), 3, 25.00, True, True, 1),
        ((280, 360), (400, 100), 4, 25.00, True, True, 1),
        ((500, 300), (680, 590), 5, 25.00, False, True, 1),
        ((680, 590), (500, 300), 6, 25.00, True, True, 1),
        ((680, 590), (280, 360), 7, 40.00, True, True, 2),
        ((280, 360), (680, 590), 8, 40.00, True, True, 2),
        ((280, 360), (0, 600), 9, 40.00, True, True, 2),
        ((0, 600), (280, 360), 10, 40.00, True, True, 2),
        ((0, 400), (0, 600), 11, 25.00, False, True, 1),
        ((0, 600), (0, 400), 12, 25.00, True, True, 1),
        ((-100, 700), (0, 600), 13, 25.00, False, True, 1),
        ((0, 600), (-100, 700), 14, 25.00, True, True, 1),
        ((0, 600), (40, 960), 15, 40.00, True, True, 2), 
        ((38, 942), (0, 600), 16, 40.00, True, True, 2),
        ((40, 960), (33, 1140), 17, 40.00, True, True, 2),
        ((33, 1140), (38, 978), 18, 40.00, True, True, 2), #(33, 1140)

        ((-100, 1150), (0, 1165), 19, 25.00, True, True, 1), #(0, 1165)
        ((0, 1165), (-100, 1150), 20, 25.00, True, True, 1),

        ((54, 1206), (360, 1672), 21, 40.00, True, True, 2), #(54, 1206)
        ((360, 1672), (54, 1206), 22, 40.00, True, True, 2), #(360, 1672)
        

        ((320, 1800), (360, 1760), 23, 25.00, True, True, 1), #(360, 1760)
        ((360, 1760), (320, 1800), 24, 25.00, True, True, 1),

        ((430, 1790), (826, 1799), 25, 40.00, True, True, 2), #(430, 1790)
        ((826, 1799), (430, 1790), 26, 40.00, True, True, 2), #(826, 1799)

        #422, 1700

        ((800, 2000), (863, 1820), 27, 25.00, True, True, 1),
        ((863, 1820), (800, 2000), 28, 25.00, True, True, 1), #(863, 1820)

        ((910, 1784), (1656, 1640), 29, 40.00, True, True, 2),#(20, 8)
        ((1656, 1640), (910, 1784), 30, 40.00, True, True, 2),#(1683, 1635)

        #879, 1773

        ((1900, 1800), (1748, 1664), 31, 25.00, True, True, 1), #(1729, 1647)
        ((1748, 1664), (1900, 1800), 32, 25.00, True, True, 1),

        ((1754, 1640), (2060, 1510), 33, 40.00, True, True, 2), #(1732, 1635)
        ((2060, 1510), (1754, 1640), 34, 40.00, True, True, 2),

        
        # (1680, 1612)

        ((2060, 1510), (2080, 1200), 35, 33.33, True, True, 2),
        ((2080, 1200), (2060, 1510), 36, 33.33, False, True, 2),
        ((2060, 1510), (2700, 1450), 37, 40.00, True, True, 2),
        ((2700, 1450), (2060, 1510), 38, 40.00, True, True, 2),
        ((2080, 1200), (2160, 920), 39, 33.33, True, True, 2),
        ((2160, 920), (2080, 1200), 40, 33.33, True, True, 2),
        ((2160, 920), (2700, 750), 41, 25.00, True, True, 1),
        ((2700, 750), (2160, 920), 42, 25.00, False, True, 1),
        ((2160, 920), (1770, 690), 43, 33.33, True, True, 2),
        ((1770, 690), (2160, 920), 44, 33.33, True, True, 2),
        ((2200, 300), (1770, 690), 45, 25.00, True, True, 1),
        ((1770, 690), (2200, 300), 46, 25.00, True, True, 1),
        ((1770, 690), (1540, 610), 47, 33.33, True, True, 2),
        ((1540, 610), (1770, 690), 48, 33.33, True, True, 2),
        ((1180, 630), (1540, 610), 49, 33.33, True, True, 2),
        ((1540, 610), (1180, 630), 50, 33.33, True, True, 2),
        ((1180, 630), (1300, 200), 51, 25.00, True, True, 1),
        ((1300, 200), (1180, 630), 52, 25.00, False, True, 1),
        ((1180, 630), (930, 570), 53, 33.33, True, True, 2),
        ((930, 570), (1180, 630), 54, 33.33, True, True, 2),
        ((1000, 100), (930, 570), 55, 25.00, True, True, 1),
        ((930, 570), (1000, 100), 56, 25.00, False, True, 1),
        ((680, 590), (930, 570), 57, 33.33, True, True, 2),
        ((930, 570), (680, 590), 58, 33.33, True, True, 2),

        ((125, 1165), (790, 1090), 59, 15.00, False, True, 1), #(125, 1165)
        ((790, 1090), (125, 1165), 60, 15.00, True, True, 1),

        ((1110, 1270), (422, 1700), 61, 15.00, True, True, 1), #(32, 20)
        ((422, 1700), (1110, 1270), 62, 15.00, False, True, 1),

        ((1060, 1230), (888, 1750), 63, 15.00, True, True, 2), #(9, 27)
        ((888, 1750), (1060, 1230), 64, 15.00, False, True, 2),

        ((1060, 1230), (1110, 1270), 65, 20.00, True, True, 2),
        ((1110, 1270), (1060, 1230), 66, 20.00, True, True, 2),

        ((1650, 1594), (1110, 1270), 67, 20.00, True, True, 2), #(1680, 1612)
        ((1110, 1270), (1650, 1594), 68, 20.00, True, True, 2),

        ((2080, 1200), (1320, 1130), 69, 20.00, True, True, 1),
        ((1320, 1130), (2080, 1200), 70, 20.00, False, True, 1),
        ((1600, 840), (1770, 690), 71, 20.00, False, True, 2),
        ((1770, 690), (1600, 840), 72, 20.00, True, True, 2),
        ((1600, 840), (1320, 1130), 73, 15.00, False, True, 2),
        ((1320, 1130), (1600, 840), 74, 15.00, False, True, 2),
        ((1600, 840), (1540, 610), 75, 15.00, False, True, 1),
        ((1540, 610), (1600, 840), 76, 15.00, False, True, 1),
        ((1320, 1130), (1230, 1160), 77, 15.00, True, True, 2),
        ((1230, 1160), (1320, 1130), 78, 15.00, False, True, 2),
        ((1230, 1160), (1110, 1270), 79, 15.00, False, True, 2),
        ((1110, 1270), (1230, 1160), 80, 15.00, True, True, 2),
        ((65, 960), (560, 900), 81, 15.00, True, True, 1),
        ((560, 900), (65, 960), 82, 15.00, True, True, 1),
        ((380, 1030), (560, 900), 83, 11.11, False, True, 1),
        ((560, 900), (380, 1030), 84, 11.11, True, True, 1),
        ((610, 870), (560, 900), 85, 11.11, False, True, 1),
        ((560, 900), (610, 870), 86, 11.11, True, True, 1),
        ((660, 780), (610, 870), 87, 11.11, True, False, 1),
        ((660, 780), (680, 590), 88, 11.11, False, True, 1),
        ((680, 590), (660, 780), 89, 11.11, True, True, 1),
        ((1100, 770), (1180, 630), 90, 15.00, False, True, 2),
        ((1180, 630), (1100, 770), 91, 15.00, False, True, 2),
        ((1254, 954), (1600, 840), 92, 15.00, True, True, 1),
        ((1600, 840), (1254, 954), 93, 15.00, False, True, 1),
        ((1320, 1130), (1242, 981), 94, 15.00, False, True, 1),
        ((1242, 981), (1320, 1130), 95, 15.00, True, True, 1),
        ((1217, 941), (1100, 770), 96, 15.00, True, True, 1),
        ((1100, 770), (1217, 941), 97, 15.00, False, True, 1),
        ((1209, 969), (1090, 1020), 98, 15.00, True, True, 1),
        ((1090, 1020), (1209, 969), 99, 15.00, False, True, 1),
        ((1230, 1160), (1090, 1020), 100, 15.00, False, True, 1),
        ((1090, 1020), (1230, 1160), 101, 15.00, False, True, 1),
        ((1060, 1230), (1010, 1100), 102, 15.00, True, True, 2),
        ((1010, 1100), (1060, 1230), 103, 15.00, True, True, 2),
        ((1010, 1100), (1090, 1020), 104, 15.00, True, True, 1),
        ((1090, 1020), (1010, 1100), 105, 15.00, True, True, 1),
        ((1060, 990), (1090, 1020), 106, 11.11, True, False, 1),
        ((790, 1090), (1010, 1100), 107, 20.00, True, True, 1),
        ((1010, 1100), (790, 1090), 108, 20.00, True, True, 1),
        ((980, 1010), (790, 1090), 109, 15.00, False, True, 1),
        ((790, 1090), (980, 1010), 110, 15.00, False, True, 1),
        ((1100, 770), (940, 860), 111, 16.66, True, True, 2),
        ((940, 860), (1100, 770), 112, 16.66, True, False, 2),
        ((1100, 770), (1090, 870), 113, 15.00, False, True, 1),
        ((780, 990), (560, 900), 114, 15.00, True, True, 1),
        ((560, 900), (780, 990), 115, 15.00, True, True, 1),
        ((660, 780), (940, 860), 116, 15.00, True, True, 1),
        ((940, 860), (660, 780), 117, 15.00, False, True, 1),
        ((610, 870), (790, 920), 118, 11.11, False, False, 1),
        ((930, 990), (790, 920), 119, 11.11, True, False, 1),
        ((790, 920), (780, 990), 120, 11.11, False, False, 1),
        ((930, 990), (780, 990), 121, 15.00, True, True, 1),
        ((780, 990), (930, 990), 122, 15.00, True, True, 1),
        ((930, 990), (960, 980), 123, 15.00, True, True, 1),
        ((960, 980), (930, 990), 124, 15.00, True, True, 1),
        ((940, 860), (960, 980), 125, 16.66, True, True, 2),
        ((960, 980), (940, 860), 126, 16.66, True, True, 2),
        ((980, 1010), (1010, 1100), 127, 16.66, False, True, 2),
        ((1010, 1100), (980, 1010), 128, 16.66, True, True, 2),
        ((1020, 980), (960, 980), 129, 15.00, False, False, 1),
        ((1090, 870), (1010, 890), 130, 11.11, True, False, 1),
        ((1060, 990), (1090, 870), 131, 11.11, True, False, 1),
        ((1020, 980), (1060, 990), 132, 11.11, True, False, 1),
        ((980, 1010), (960, 980), 133, 15.00, True, True, 2),
        ((960, 980), (980, 1010), 134, 15.00, True, True, 2),
        ((1010, 890), (1020, 980), 135, 11.11, True, False, 1),
        ((1230, 1160), (1250, 1180), 136, 15.00, True, True, 1),
        ((1250, 1180), (1230, 1160), 137, 15.00, False, True, 1), #end 137, 139, 141, 143, 145, 147, 149
        ((980, 1010), (1000, 1005), 138, 11.11, True, True, 1),
        ((1000, 1005), (980, 1010), 139, 11.11, False, True, 1), #end
        ((1060, 1230), (1080, 1200), 140, 11.11, True, True, 1),
        ((1080, 1200), (1060, 1230), 141, 11.11, False, True, 1), #end
        ((1090, 870), (1120, 885), 142, 11.11, True, True, 1),
        ((1120, 885), (1090, 870), 143, 11.11, False, True, 1), #end
        ((940, 860), (960, 870), 144, 11.11, True, True, 1),
        ((960, 870), (940, 860), 145, 11.11, False, True, 1), #end
        ((660, 780), (680, 765), 146, 11.11, True, True, 1),
        ((680, 765), (660, 780), 147, 11.11, False, True, 1), #end
        ((790, 1090), (770, 1070), 148, 11.11, True, True, 1),
        ((770, 1070), (790, 1090), 149, 11.11, False, True, 1), #end
        ((38, 978), (65, 960), 154, 25.00, True, False, 1),
        ((65, 960), (38, 942), 155, 25.00, False, False, 1),
        ((38, 978), (38, 942), 156, 40.00, True, True, 2),
        ((33, 1140), (54, 1206), 157, 40.00, True, True, 2), #
        ((54, 1206), (33, 1140), 158, 40.00, True, True, 2), #
        ((125, 1165), (0, 1165), 159, 25.00, True, True, 1),
        ((0, 1165), (125, 1165), 160, 25.00, True, True, 1),
        ((125, 1165), (33, 1140), 161, 25.00, False, True, 1),
        ((33, 1140), (0, 1165), 162, 25.00, False, True, 1),
        ((0, 1165), (54, 1206), 163, 25.00, False, True, 1),
        ((54, 1206), (125, 1165), 164, 25.00, False, True, 1),
        ((360, 1672), (430, 1790), 165, 40.00, True, True, 2),
        ((430, 1790), (360, 1672), 166, 40.00, True, True, 2),
        ((360, 1760), (422, 1700), 167, 25.00, True, True, 2),
        ((422, 1700), (360, 1760), 168, 25.00, True, True, 2),
        ((360, 1672), (360, 1760), 189, 25.00, False, True, 2),
        ((360, 1760), (430, 1790), 170, 25.00, False, True, 2),
        ((430, 1790), (422, 1700), 171, 25.00, False, True, 2),
        ((422, 1700), (360, 1672), 172, 25.00, False, True, 2),
        ((826, 1799),(910, 1784), 173, 40.00, True, True, 2),
        ((910, 1784),(826, 1799), 174, 40.00, True, True, 2),
        ((863, 1820), (888, 1750), 175, 25.00, True, True, 2),
        ((888, 1750), (863, 1820), 176, 25.00, True, True, 2),
        ((826, 1799), (863, 1820), 177, 25.00, False, True, 2),
        ((863, 1820), (910, 1784), 178, 25.00, False, True, 2),
        ((910, 1784), (888, 1750), 179, 25.00, False, True, 2),
        ((888, 1750), (826, 1799), 180, 25.00, False, True, 2),
        ((1656, 1640), (1754, 1640), 181, 40.00, True, True, 2), #(1710, 1630)
        ((1754, 1640), (1656, 1640), 182, 40.00, True, True, 2),
        ((1748, 1664), (1650, 1594), 183, 25.00, True, True, 1),
        ((1650, 1594), (1748, 1664), 184, 25.00, True, True, 1),
        ((1656, 1640), (1748, 1664), 185, 25.00, False, True, 1),
        ((1748, 1664), (1754, 1640), 186, 25.00, False, True, 1),
        ((1754, 1640), (1650, 1594), 187, 25.00, False, True, 1),
        ((1650, 1594), (1656, 1640), 188, 25.00, False, True, 1),
        # ((1254, 954), (1217, 941), 150, 15.00, True, True, 1),
        # ((1217, 941), (1209, 969), 151, 15.00, True, True, 1),
        # ((1209, 969), (1242, 981), 152, 15.00, True, True, 1),
        # ((1242, 981), (1254, 954), 153, 15.00, True, True, 1),
    ]

    # ((1254, 954), (1217, 941), 150, 15.00, True, True, 1),
    # ((1217, 941), (1209, 969), 151, 15.00, True, True, 1),
    # ((1209, 969), (1242, 981), 152, 15.00, True, True, 1),
    # ((1242, 981), (1254, 954), 153, 15.00, True, True, 1),
    # ((1254, 954), (1217, 941), (1254, 941), 150, 20.0, True, True),
    #     ((1217, 941), (1209, 969), (1217, 969), 151, 20.0, True, True),
    #     ((1209, 969), (1242, 981), (1209, 981), 152, 20.0, True, True),
    #     ((1242, 981), (1254, 954), (1242, 954), 153, 20.0, True, True),

    curves = [
        ((1254, 954), (1217, 941), (1235, 935), 150, 20.0, True, True),
        ((1217, 941), (1209, 969), (1205, 955), 151, 20.0, True, True),
        ((1209, 969), (1242, 981), (1225, 985), 152, 20.0, True, True),
        ((1242, 981), (1254, 954), (1255, 965), 153, 20.0, True, True),
    ]
    def curve_with_speed_limit_mapper(x): return {"start": x[0], "end": x[1], "id": x[3], "control_point": x[2],
                                                  "speed_limit": x[4],
                                                  "right_of_way": x[5], "do_move": x[6]}
    def road_with_speed_limit_mapper(x): return {"start": x[0], "end": x[1], "id": x[2], "speed_limit": x[3], 
                                                 "right_of_way": x[4], "do_move": x[5], "lines": x[6]}
    sim.set_roads(list(map(road_with_speed_limit_mapper, data))
                  + list(map(curve_with_speed_limit_mapper, curves)),
                  True)
    sim.set_lights(set_traffic_light(sim))


def set_traffic_light(sim):
    return [TrafficSignal([(66, 103, 62, 79,  83, 85, 50, 54, 43, 48, 47, 49, 53, 57, 8, 58, 126, 133, 111, 125), (64, 65, 67, 114, 81, 90, 52, 71, 45, 75, 55, 5, 88, 124, 129, 116, 145)], sim)]      


def test1():
    # traffic light and right of way test
    sim = Simulation("TEST_Cracow")
    set_roads_with_right_of_way(sim)
    gen_1 = Generator(carTypes=[
        (2, {"length": 8.0, "break_reaction_time": 0.33, "maximum_speed": 25.0, "a_max": 2.5, "b_max": 5.0}),
        (1, {"length": 4.6, "break_reaction_time": 0.25, "maximum_speed": 35.0, "a_max": 4.5, "b_max": 7.2}),
        (4, {"maximum_speed": 25.0}),
        (2, {"maximum_speed": 20.0}),
        (1, {"avarage_reaction_time": 0.75, "maximum_speed": 50.0}),
        (1, {"avarage_reaction_time": 0.75, "maximum_speed": 12.0, "length": 1.6, "a_max": 2.0, "width": 0.8}),
        (1, {"avarage_reaction_time": 0.75, "maximum_speed": 25.0, "length": 1.75, "a_max": 2.5, "width": 1.2}),
    ], paths=[
        (2, (38, (1250, 1180), True)), 
        (1, (42, (1000, 1005), True)),
        (1, (45, (1000, 1005), True)),
        (1, (52, (1000, 1005), True)),
        (1, (55, (1250, 1180), True)),
        (1, (5, (1250, 1180), True)),
        (1, (3, (1080, 1200), True)),
        (1, (2, (1080, 1200), True)),
        (2, (11, (1120, 885), True)),
        (2, (13, (1120, 885), True)),
        (1, (19, (1080, 1200), True)),
        (2, (23, (1250, 1180), True)),
        (1, (27, (1000, 1005), True)),
        (2, (31, (1250, 1180), True)),     
        (2, (38, (1120, 885), True)),
        (1, (42, (1120, 885), True)),
        (1, (52, (960, 870), True)),
        (1, (55, (960, 870), True)),
        (1, (5, (680, 765), True)),
        (1, (3, (680, 765), True)),
        (1, (11, (770, 1070), True)),
        (2, (13, (770, 1070), True)),
        (2, (19, (770, 1070), True)),
        (1, (23, (770, 1070), True)),
        (2, (27, (320, 1800), True)),
        (2, (31, (980, 1010), True))
    ], simulation=sim, intensity_function=intensity_function_in)

    gen_2 = Generator(carTypes=[
        (2, {"length": 8.0, "break_reaction_time": 0.33, "maximum_speed": 25.0, "a_max": 2.5, "b_max": 5.0}),
        (1, {"length": 4.6, "break_reaction_time": 0.25, "maximum_speed": 35.0, "a_max": 4.5, "b_max": 7.2}),
        (4, {"maximum_speed": 25.0}),
        (2, {"maximum_speed": 20.0}),
        (1, {"avarage_reaction_time": 0.75, "maximum_speed": 50.0}),
        (1, {"avarage_reaction_time": 0.75, "maximum_speed": 12.0, "length": 1.6, "a_max": 2.0, "width": 0.8}),
        (1, {"avarage_reaction_time": 0.75, "maximum_speed": 25.0, "length": 1.75, "a_max": 2.5, "width": 1.2}),
    ], paths=[
        (1, (137, (0, 300), True)), 
        (1, (139, (0, 400), True)),
        (1, (141, (-100, 700), True)),
        (1, (143, (-100, 1150), True)),
        (2, (145, (2700, 1450), True)),
        (1, (147, (2200, 300), True)),
        (1, (149, (1300, 200), True)),
        (1, (83, (400, 100), True)),
        (2, (3, (800, 2000), True)),
        (1, (19, (1000, 100), True)),
        (1, (11, (2700, 750), True)),
        (2, (45, (320, 1800), True)),
        (2, (55, (1900, 1800), True)),
        (1, (137, (0, 300), True)), 
        (1, (139, (400, 100), True)),
        (1, (141, (500, 300), True)),
        (1, (143, (380, 1030), True)),
        (1, (145, (1900, 1800), True)),
        (1, (147, (2700, 750), True)),
        (1, (149, (0, 300), True)),
    ], simulation=sim, intensity_function=intensity_function_out)
    sim.init_distance_vector()
    sim.set_generators([gen_1, gen_2])
    run_simulation(sim)

def runTests():
    test1()


if __name__ == "__main__":
    runTests()